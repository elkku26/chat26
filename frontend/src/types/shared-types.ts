/*
 Generated by typeshare 1.13.2
*/

export enum AcknowledgeKind {
	UserJoined = "UserJoined",
	ForwardChat = "ForwardChat",
	SendChat = "SendChat",
	JoinRoom = "JoinRoom",
}

export interface AcknowledgePayload {
	related_msg_id: string;
	acknowledged: boolean;
	data: any;
	kind: AcknowledgeKind;
}

export interface ChatMessage {
	id: string;
	created_at: string;
	content: string;
	sender_id: string;
}

export interface ForwardChatPayload {
	chat_message: ChatMessage;
}

export interface JoinRoomPayload {
	username: string;
	pfp_url: string;
}

export interface SendChatPayload {
	sender_id: string;
	content: string;
}

export interface User {
	id: string;
	created_at: string;
	username: string;
	pfp_url: string;
}

export interface UserJoinedPayload {
	user: User;
}

export enum WSClientMessageKind {
	JoinRoom = "JoinRoom",
	SendChat = "SendChat",
}

export interface WSClientMessage {
	msg_id: string;
	kind: WSClientMessageKind;
	payload: any;
}

export enum WSServerMessageKind {
	Ping = "Ping",
	ForwardChat = "ForwardChat",
	UserJoined = "UserJoined",
	Acknowledged = "Acknowledged",
	NotAcknowledged = "NotAcknowledged",
}

export interface WSServerMessage {
	msg_id: string;
	kind: WSServerMessageKind;
	payload: any;
}

